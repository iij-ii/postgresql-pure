-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | pure Haskell PostgreSQL driver
--   
--   pure Haskell PostgreSQL driver
@package postgresql-pure
@version 0.2.1.0

module Database.PostgreSQL.Pure.Oid

-- | OID.
--   
--   Constant values are listed in <tt>Database.PostgreSQL.Pure.Oid</tt>.
newtype Oid
Oid :: Int32 -> Oid
_daterange :: Oid
_int4range :: Oid
_int8range :: Oid
_numrange :: Oid
_tsrange :: Oid
_tstzrange :: Oid
bit :: Oid
bitArray :: Oid
bool :: Oid
boolArray :: Oid
box :: Oid
boxArray :: Oid
bpchar :: Oid
bpcharArray :: Oid
bytea :: Oid
byteaArray :: Oid
char :: Oid
charArray :: Oid
cid :: Oid
cidArray :: Oid
cidr :: Oid
cidrArray :: Oid
circle :: Oid
circleArray :: Oid
date :: Oid
dateArray :: Oid
daterange :: Oid
float4 :: Oid
float4Array :: Oid
float8 :: Oid
float8Array :: Oid
inet :: Oid
inetArray :: Oid
int2 :: Oid
int2Array :: Oid
int2vector :: Oid
int2vectorArray :: Oid
int4 :: Oid
int4Array :: Oid
int4range :: Oid
int8 :: Oid
int8Array :: Oid
int8range :: Oid
interval :: Oid
intervalArray :: Oid
json :: Oid
jsonArray :: Oid
jsonb :: Oid
jsonbArray :: Oid
line :: Oid
lineArray :: Oid
lseg :: Oid
lsegArray :: Oid
macaddr :: Oid
macaddrArray :: Oid
money :: Oid
moneyArray :: Oid
name :: Oid
nameArray :: Oid
numeric :: Oid
numericArray :: Oid
numrange :: Oid
oid :: Oid
oidArray :: Oid
oidvector :: Oid
oidvectorArray :: Oid
path :: Oid
pathArray :: Oid
point :: Oid
pointArray :: Oid
polygon :: Oid
polygonArray :: Oid
record :: Oid
recordArray :: Oid
refcursor :: Oid
refcursorArray :: Oid
regclass :: Oid
regclassArray :: Oid
regoper :: Oid
regoperArray :: Oid
regoperator :: Oid
regoperatorArray :: Oid
regproc :: Oid
regprocArray :: Oid
regprocedure :: Oid
regprocedureArray :: Oid
regtype :: Oid
regtypeArray :: Oid
sqlIdentifier :: Oid
text :: Oid
textArray :: Oid
tid :: Oid
tidArray :: Oid
time :: Oid
timeArray :: Oid
timestamp :: Oid
timestampArray :: Oid
timestamptz :: Oid
timestamptzArray :: Oid
timetz :: Oid
timetzArray :: Oid
tsrange :: Oid
tstzrange :: Oid
unknown :: Oid
uuid :: Oid
uuidArray :: Oid
varbit :: Oid
varbitArray :: Oid
varchar :: Oid
varcharArray :: Oid
void :: Oid
xid :: Oid
xidArray :: Oid
xml :: Oid
xmlArray :: Oid
instance GHC.Num.Num Database.PostgreSQL.Pure.Oid.Oid
instance GHC.Classes.Eq Database.PostgreSQL.Pure.Oid.Oid
instance GHC.Show.Show Database.PostgreSQL.Pure.Oid.Oid
instance GHC.Read.Read Database.PostgreSQL.Pure.Oid.Oid

module Database.PostgreSQL.Pure.Parser

-- | For implementing <a>fromRecord</a>.
column :: FromField a => StringDecoder -> ColumnInfo -> Parser a


-- | This is a list interface version of <tt>Database.PostgreSQL.Pure</tt>.
--   
--   <h1>Typical Example</h1>
--   
--   Prepare a following table.
--   
--   <pre>
--   CREATE TABLE person (
--     id serial PRIMARY KEY,
--     name varchar(255) NOT NULL
--   );
--   INSERT INTO person (name) VALUES ('Ada');
--   </pre>
--   
--   You can run like following to get the record whose ID is 1.
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedStrings
--   
--   &gt;&gt;&gt; :set -XFlexibleContexts
--   
--   &gt;&gt;&gt; :set -XTypeApplications
--   
--   &gt;&gt;&gt; 
--   
--   &gt;&gt;&gt; import Database.PostgreSQL.Pure.List
--   
--   &gt;&gt;&gt; import Data.Default.Class (def)
--   
--   &gt;&gt;&gt; import Data.Int (Int32)
--   
--   &gt;&gt;&gt; import Data.ByteString (ByteString)
--   
--   &gt;&gt;&gt; import Data.Tuple.Only (Only (Only))
--   
--   &gt;&gt;&gt; import Data.Maybe (fromMaybe)
--   
--   &gt;&gt;&gt; import System.Environment (lookupEnv)
--   
--   &gt;&gt;&gt; 
--   
--   &gt;&gt;&gt; getEnvDef name value = fromMaybe value &lt;$&gt; lookupEnv name
--   
--   &gt;&gt;&gt; 
--   
--   &gt;&gt;&gt; host' &lt;- getEnvDef "PURE_HOST" "127.0.0.1"
--   
--   &gt;&gt;&gt; port' &lt;- getEnvDef "PURE_PORT" "5432"
--   
--   &gt;&gt;&gt; user' &lt;- getEnvDef "PURE_USER" "postgres"
--   
--   &gt;&gt;&gt; password' &lt;- getEnvDef "PURE_PASSWORD" ""
--   
--   &gt;&gt;&gt; database' &lt;- getEnvDef "PURE_DATABASE" "postgres"
--   
--   &gt;&gt;&gt; 
--   
--   &gt;&gt;&gt; conn &lt;- connect def { address = AddressNotResolved host' port', user = user', password = password', database = database' }
--   
--   &gt;&gt;&gt; preparedStatementProcedure = parse "" "SELECT id, name FROM person WHERE id = $1" (Left (1, 2))
--   
--   &gt;&gt;&gt; portalProcedure &lt;- bind "" BinaryFormat BinaryFormat (parameters conn) (const $ fail "") (Only (1 :: Int32)) preparedStatementProcedure
--   
--   &gt;&gt;&gt; executedProcedure = execute @_ @(Int32, ByteString) 0 (const $ fail "") portalProcedure
--   
--   &gt;&gt;&gt; ((_, _, e, _), _) &lt;- sync conn executedProcedure
--   
--   &gt;&gt;&gt; records e
--   [(1,"Ada")]
--   </pre>
module Database.PostgreSQL.Pure.List

-- | A configuration of a connection.
--   
--   Default configuration is <a>def</a>, which is following.
--   
--   <pre>
--   &gt;&gt;&gt; address def
--   AddressResolved 127.0.0.1:5432
--   
--   &gt;&gt;&gt; user def
--   "postgres"
--   
--   &gt;&gt;&gt; password def
--   ""
--   
--   &gt;&gt;&gt; database def
--   ""
--   
--   &gt;&gt;&gt; sendingBufferSize def
--   4096
--   
--   &gt;&gt;&gt; receptionBufferSize def
--   4096
--   </pre>
data Config
Config :: Address -> String -> String -> String -> Int -> Int -> Config

-- | Server address.
[$sel:address:Config] :: Config -> Address

-- | User name.
[$sel:user:Config] :: Config -> String

-- | Password of user.
[$sel:password:Config] :: Config -> String

-- | Database name.
[$sel:database:Config] :: Config -> String

-- | The size of sending buffer in byte.
[$sel:sendingBufferSize:Config] :: Config -> Int

-- | The size of receiving buffer in byte.
[$sel:receptionBufferSize:Config] :: Config -> Int

-- | PostgreSQL connection.
data Connection

-- | The process ID of the server.
($sel:pid:Connection) :: Connection -> Pid

-- | Set of server parameters.
($sel:parameters:Connection) :: Connection -> BackendParameters

-- | Configuration of this connection.
($sel:config:Connection) :: Connection -> Config

-- | IP address.
data Address

-- | Address which is DNS resolved.
AddressResolved :: SockAddr -> Address

-- | Address which is not DNS resolved.
AddressNotResolved :: HostName -> ServiceName -> Address

-- | Set of server parameters.
type BackendParameters = Map ShortByteString ShortByteString

-- | Proccess ID
type Pid = Int32

-- | Bracket function for a connection.
withConnection :: Config -> (Connection -> IO a) -> IO a

-- | To connect to the server.
connect :: Config -> IO Connection

-- | To disconnect to the server.
disconnect :: Connection -> IO ()

-- | To get the procedure to build the message of parsing SQL query and to
--   parse its response.
parse :: PreparedStatementName -> Query -> Either (Word, Word) ([Oid], [Oid]) -> PreparedStatementProcedure

-- | To get the procedure to build the message of binding the parameter and
--   to parse its response.
bind :: (Bind ps, ToRecord param, MonadFail m) => PortalName -> FormatCode -> FormatCode -> BackendParameters -> StringEncoder -> param -> ps -> m PortalProcedure

-- | To get the procedure to build the message of execution and to parse
--   its response.
execute :: (Execute p, FromRecord result) => Word -> StringDecoder -> p -> ExecutedProcedure result

-- | To build and send the given message and a “Flush” message and to
--   receive and parse those responses.
flush :: Message m => Connection -> m -> IO (MessageResult m)

-- | To build and send the given message and a “Sync” message and to
--   receive and parse those responses.
sync :: Message m => Connection -> m -> IO (MessageResult m, TransactionState)

-- | To build and send the “Close” message and to receive and parse its
--   response.
close :: Close p => p -> CloseProcedure

-- | This represents a prepared statement which is already processed by a
--   server.
data PreparedStatement

-- | This represents a prepared statement which is not yet processed by a
--   server.
data PreparedStatementProcedure

-- | Name of a prepared statement.
newtype PreparedStatementName
PreparedStatementName :: ByteString -> PreparedStatementName

-- | This represents a portal which is already processed by a server.
data Portal

-- | This represents a portal which is not yet processed by a server.
data PortalProcedure

-- | Name of a portal.
newtype PortalName
PortalName :: ByteString -> PortalName

-- | This represents a result of a “Execute” message which is already
--   processed by a server.
data Executed r

-- | This represents a result of a “Execute” message which is not yet
--   processed by a server.
data ExecutedProcedure r

-- | Result of a “Execute” message.
data ExecuteResult

-- | All records gotten.
ExecuteComplete :: CommandTag -> ExecuteResult

-- | No records.
ExecuteEmptyQuery :: ExecuteResult

-- | Records are left yet.
ExecuteSuspended :: ExecuteResult

-- | Command tag, which means which SQL command is completed.
data CommandTag
InsertTag :: Oid -> Int -> CommandTag
DeleteTag :: Int -> CommandTag
UpdateTag :: Int -> CommandTag
SelectTag :: Int -> CommandTag
MoveTag :: Int -> CommandTag
FetchTag :: Int -> CommandTag
CopyTag :: Int -> CommandTag
CreateTableTag :: CommandTag
DropTableTag :: CommandTag
BeginTag :: CommandTag
CommitTag :: CommandTag
RollbackTag :: CommandTag
SetTag :: CommandTag

-- | SQL query.
--   
--   This <a>fromString</a> counts only ASCII, becouse it is the same with
--   <a>ByteString</a>.
newtype Query
Query :: ByteString -> Query

-- | Format code of parameters of results.
data FormatCode
TextFormat :: FormatCode
BinaryFormat :: FormatCode

-- | Metadata of a column.
data ColumnInfo

-- | This means that <tt>r</tt> is a objective of <a>flush</a> and
--   <a>sync</a>.
class Message m

-- | To convert a type which means that it is not processed by the server
--   to a respective type which means that it is processed by the server.
type family MessageResult m :: Type

-- | This means that <tt>ps</tt> is a objective of <a>bind</a>.
class Bind ps

-- | This means that <tt>p</tt> is a objective of <a>execute</a>.
class Execute p

-- | This means that <tt>p</tt> is a objective of <a>close</a>.
class Close p

-- | Encoder of strings which may fail.
type StringEncoder = String -> Either String ByteString

-- | Decoder of strings which may fail.
type StringDecoder = ByteString -> Either String String

-- | To send <tt>BEGIN</tt> SQL statement.
begin :: ExecutedProcedure ()

-- | To send <tt>COMMIT</tt> SQL statement.
commit :: ExecutedProcedure ()

-- | To send <tt>ROLLBACK</tt> SQL statement.
rollback :: ExecutedProcedure ()

-- | Transaction state of a server.
data TransactionState

-- | Not in a transaction block.
Idle :: TransactionState

-- | In a transaction block.
Block :: TransactionState

-- | Transaction failed.
Failed :: TransactionState

-- | This means that a field can be decoded as <tt>a</tt>.
class FromField a

-- | Decoder of a field.
fromField :: (FromField a, MonadFail m) => StringDecoder -> ColumnInfo -> Maybe ByteString -> m a

-- | This means that a record can be parsed as <tt>a</tt>.
class FromRecord a

-- | Decoder of a record.
fromRecord :: FromRecord a => StringDecoder -> [ColumnInfo] -> Parser a

-- | This means that <tt>a</tt> can be encoded to a field.
class ToField a

-- | Encoder of a field.
toField :: (ToField a, MonadFail m) => BackendParameters -> StringEncoder -> Maybe Oid -> FormatCode -> a -> m (Maybe ByteString)

-- | This means that <tt>a</tt> can be encoded to a record.
class ToRecord a

-- | Encoder of a field.
toRecord :: (ToRecord a, MonadFail m) => BackendParameters -> StringEncoder -> Maybe [Oid] -> [FormatCode] -> a -> m [Maybe ByteString]

-- | Data without encoding nor decoding of a field.
data Raw

-- | Not <tt>NULL</tt>.
pattern Value :: ByteString -> Raw

-- | <tt>NULL</tt>.
pattern Null :: Raw

-- | Root exception.
--   
--   <pre>
--   <a>Exception</a>
--     ├ <a>ErrorResponse</a>
--     └ <a>ResponseParsingFailed</a>
--   </pre>
data Exception
Exception :: e -> Exception

-- | This means that the server responds an error.
data ErrorResponse
ErrorResponse :: ByteString -> ByteString -> ByteString -> Maybe TransactionState -> ErrorResponse
[severity] :: ErrorResponse -> ByteString
[code] :: ErrorResponse -> ByteString
[message] :: ErrorResponse -> ByteString
[transactionState] :: ErrorResponse -> Maybe TransactionState

-- | This means that the server responds an unknown message.
newtype ResponseParsingFailed
ResponseParsingFailed :: String -> ResponseParsingFailed
[causedBy] :: ResponseParsingFailed -> String

-- | OID.
--   
--   Constant values are listed in <tt>Database.PostgreSQL.Pure.Oid</tt>.
data Oid


-- | This is a client library for PostgreSQL Database which has following
--   features.
--   
--   <ul>
--   <li>faster and less CPU load<ul><li>especially on multi-core
--   environments</li></ul></li>
--   <li>pure Haskell implementations<ul><li>no libpq
--   dependency</li><li>easy to build even on Windows</li></ul></li>
--   <li>implements extended query protocol<ul><li>about extended query
--   protocol, see
--   <a>https://www.postgresql.org/docs/current/protocol-flow.html#PROTOCOL-FLOW-EXT-QUERY</a></li></ul></li>
--   </ul>
--   
--   <h1>Typical Example</h1>
--   
--   Prepare a following table.
--   
--   <pre>
--   CREATE TABLE person (
--     id serial PRIMARY KEY,
--     name varchar(255) NOT NULL
--   );
--   INSERT INTO person (name) VALUES ('Ada');
--   </pre>
--   
--   You can run like following to get the record whose ID is 1.
--   
--   <pre>
--   &gt;&gt;&gt; :set -XOverloadedStrings
--   
--   &gt;&gt;&gt; :set -XFlexibleContexts
--   
--   &gt;&gt;&gt; :set -XDataKinds
--   
--   &gt;&gt;&gt; :set -XTypeFamilies
--   
--   &gt;&gt;&gt; :set -XTypeApplications
--   
--   &gt;&gt;&gt; 
--   
--   &gt;&gt;&gt; import Database.PostgreSQL.Pure
--   
--   &gt;&gt;&gt; import Data.Default.Class (def)
--   
--   &gt;&gt;&gt; import Data.Int (Int32)
--   
--   &gt;&gt;&gt; import Data.ByteString (ByteString)
--   
--   &gt;&gt;&gt; import Data.Tuple.Only (Only (Only))
--   
--   &gt;&gt;&gt; import Data.Tuple.Homotuple.Only ()
--   
--   &gt;&gt;&gt; import Data.Maybe (fromMaybe)
--   
--   &gt;&gt;&gt; import System.Environment (lookupEnv)
--   
--   &gt;&gt;&gt; 
--   
--   &gt;&gt;&gt; getEnvDef name value = fromMaybe value &lt;$&gt; lookupEnv name
--   
--   &gt;&gt;&gt; 
--   
--   &gt;&gt;&gt; host' &lt;- getEnvDef "PURE_HOST" "127.0.0.1"
--   
--   &gt;&gt;&gt; port' &lt;- getEnvDef "PURE_PORT" "5432"
--   
--   &gt;&gt;&gt; user' &lt;- getEnvDef "PURE_USER" "postgres"
--   
--   &gt;&gt;&gt; password' &lt;- getEnvDef "PURE_PASSWORD" ""
--   
--   &gt;&gt;&gt; database' &lt;- getEnvDef "PURE_DATABASE" "postgres"
--   
--   &gt;&gt;&gt; 
--   
--   &gt;&gt;&gt; conn &lt;- connect def { address = AddressNotResolved host' port', user = user', password = password', database = database' }
--   
--   &gt;&gt;&gt; preparedStatementProcedure = parse "" "SELECT id, name FROM person WHERE id = $1" Nothing
--   
--   &gt;&gt;&gt; portalProcedure &lt;- bind @_ @2 @_ @_ "" BinaryFormat BinaryFormat (parameters conn) (const $ fail "") (Only (1 :: Int32)) preparedStatementProcedure
--   
--   &gt;&gt;&gt; executedProcedure = execute @_ @_ @(Int32, ByteString) 0 (const $ fail "") portalProcedure
--   
--   &gt;&gt;&gt; ((_, _, e, _), _) &lt;- sync conn executedProcedure
--   
--   &gt;&gt;&gt; records e
--   [(1,"Ada")]
--   </pre>
module Database.PostgreSQL.Pure

-- | A configuration of a connection.
--   
--   Default configuration is <a>def</a>, which is following.
--   
--   <pre>
--   &gt;&gt;&gt; address def
--   AddressResolved 127.0.0.1:5432
--   
--   &gt;&gt;&gt; user def
--   "postgres"
--   
--   &gt;&gt;&gt; password def
--   ""
--   
--   &gt;&gt;&gt; database def
--   ""
--   
--   &gt;&gt;&gt; sendingBufferSize def
--   4096
--   
--   &gt;&gt;&gt; receptionBufferSize def
--   4096
--   </pre>
data Config
Config :: Address -> String -> String -> String -> Int -> Int -> Config

-- | Server address.
[$sel:address:Config] :: Config -> Address

-- | User name.
[$sel:user:Config] :: Config -> String

-- | Password of user.
[$sel:password:Config] :: Config -> String

-- | Database name.
[$sel:database:Config] :: Config -> String

-- | The size of sending buffer in byte.
[$sel:sendingBufferSize:Config] :: Config -> Int

-- | The size of receiving buffer in byte.
[$sel:receptionBufferSize:Config] :: Config -> Int

-- | PostgreSQL connection.
data Connection

-- | The process ID of the server.
($sel:pid:Connection) :: Connection -> Pid

-- | Set of server parameters.
($sel:parameters:Connection) :: Connection -> BackendParameters

-- | Configuration of this connection.
($sel:config:Connection) :: Connection -> Config

-- | IP address.
data Address

-- | Address which is DNS resolved.
AddressResolved :: SockAddr -> Address

-- | Address which is not DNS resolved.
AddressNotResolved :: HostName -> ServiceName -> Address

-- | Set of server parameters.
type BackendParameters = Map ShortByteString ShortByteString

-- | Proccess ID
type Pid = Int32

-- | Bracket function for a connection.
withConnection :: Config -> (Connection -> IO a) -> IO a

-- | To connect to the server.
connect :: Config -> IO Connection

-- | To disconnect to the server.
disconnect :: Connection -> IO ()

-- | To get the procedure to build the message of parsing SQL query and to
--   parse its response.
parse :: forall plen rlen. (KnownNat plen, KnownNat rlen, IsHomotupleItem plen Oid, IsHomotupleItem rlen ColumnInfo, IsHomotupleItem rlen Oid, IsHomolisttuple rlen Oid, IsHomolisttuple plen Oid, IsHomolisttuple rlen ColumnInfo) => PreparedStatementName -> Query -> Maybe (Homotuple plen Oid, Homotuple rlen Oid) -> PreparedStatementProcedure plen rlen

-- | To get the procedure to build the message of binding the parameter and
--   to parse its response.
bind :: forall rlen param m. (Bind ps, ToRecord param, KnownNat rlen, HasLength (Homotuple rlen ColumnInfo), MonadFail m) => PortalName -> FormatCode -> FormatCode -> BackendParameters -> StringEncoder -> param -> ps (Length param) rlen -> m (PortalProcedure (Length param) rlen)

-- | To get the procedure to build the message of execution and to parse
--   its response.
execute :: forall plen result. (Execute p, FromRecord result, IsHomotupleItem (Length result) ColumnInfo, IsHomolisttuple (Length result) ColumnInfo) => Word -> StringDecoder -> p plen (Length result) -> ExecutedProcedure plen (Length result) result

-- | To build and send the given message and a “Flush” message and to
--   receive and parse those responses.
flush :: Message m => Connection -> m -> IO (MessageResult m)

-- | To build and send the given message and a “Sync” message and to
--   receive and parse those responses.
sync :: Message m => Connection -> m -> IO (MessageResult m, TransactionState)

-- | To build and send the “Close” message and to receive and parse its
--   response.
close :: Close p => p -> CloseProcedure

-- | This represents a prepared statement which is already processed by a
--   server.
--   
--   <tt>parameterLength</tt> is the number of columns of the parameter and
--   <tt>resultLength</tt> is the number of columns of the results. This is
--   the same with <a>PreparedStatementProcedure</a>, <a>Portal</a>,
--   <a>PortalProcedure</a>, <a>Executed</a> and <a>ExecutedProcedure</a>.
data PreparedStatement (parameterLength :: Nat) (resultLength :: Nat)

-- | This represents a prepared statement which is not yet processed by a
--   server.
data PreparedStatementProcedure (parameterLength :: Nat) (resultLength :: Nat)

-- | Name of a prepared statement.
newtype PreparedStatementName
PreparedStatementName :: ByteString -> PreparedStatementName

-- | This represents a portal which is already processed by a server.
data Portal (parameterLength :: Nat) (resultLength :: Nat)

-- | This represents a portal which is not yet processed by a server.
data PortalProcedure (parameterLength :: Nat) (resultLength :: Nat)

-- | Name of a portal.
newtype PortalName
PortalName :: ByteString -> PortalName

-- | This represents a result of a <a>Execute</a> message which is already
--   processed by a server.
data Executed (parameterLength :: Nat) (resultLength :: Nat) r

-- | This represents a result of a <a>Execute</a> message which is not yet
--   processed by a server.
data ExecutedProcedure (parameterLength :: Nat) (resultLength :: Nat) r

-- | Result of a “Execute” message.
data ExecuteResult

-- | All records gotten.
ExecuteComplete :: CommandTag -> ExecuteResult

-- | No records.
ExecuteEmptyQuery :: ExecuteResult

-- | Records are left yet.
ExecuteSuspended :: ExecuteResult

-- | This represents a result of a “Close” message which is not yet
--   processed by a server.
data CloseProcedure

-- | Command tag, which means which SQL command is completed.
data CommandTag
InsertTag :: Oid -> Int -> CommandTag
DeleteTag :: Int -> CommandTag
UpdateTag :: Int -> CommandTag
SelectTag :: Int -> CommandTag
MoveTag :: Int -> CommandTag
FetchTag :: Int -> CommandTag
CopyTag :: Int -> CommandTag
CreateTableTag :: CommandTag
DropTableTag :: CommandTag
BeginTag :: CommandTag
CommitTag :: CommandTag
RollbackTag :: CommandTag
SetTag :: CommandTag

-- | SQL query.
--   
--   This <a>fromString</a> counts only ASCII, becouse it is the same with
--   <a>ByteString</a>.
newtype Query
Query :: ByteString -> Query

-- | Format code of parameters of results.
data FormatCode
TextFormat :: FormatCode
BinaryFormat :: FormatCode

-- | Metadata of a column.
data ColumnInfo

-- | This means that <tt>r</tt> is a objective of <a>flush</a> and
--   <a>sync</a>.
class Message m

-- | To convert a type which means that it is not processed by the server
--   to a respective type which means that it is processed by the server.
type family MessageResult m :: Type

-- | This means that <tt>ps</tt> is a objective of <a>bind</a>.
class Bind ps

-- | This means that <tt>p</tt> is a objective of <a>execute</a>.
class Execute p

-- | This means that <tt>p</tt> is a objective of <a>close</a>.
class Close p

-- | Encoder of strings which may fail.
type StringEncoder = String -> Either String ByteString

-- | Decoder of strings which may fail.
type StringDecoder = ByteString -> Either String String

-- | This means that <tt>r</tt> has a <a>name</a> accesser.
class HasName r

-- | Type of name of <tt>r</tt>.
type family Name r :: Type

-- | This means that <tt>r</tt> has a <a>parameterOids</a> accesser.
class HasParameterOids r a

-- | To get a name of <tt>r</tt>.
name :: HasName r => r -> Name r

-- | To get OIDs of a parameter.
parameterOids :: HasParameterOids r a => r -> a

-- | To get a list of column infos of the result record.
resultInfos :: (IsHomolisttuple m ColumnInfo, IsHomotupleItem m ColumnInfo) => PreparedStatement n m -> Homotuple m ColumnInfo

-- | To get the result of <a>Executed</a>.
result :: Executed n m r -> ExecuteResult

-- | To get the records of <a>Executed</a>.
records :: Executed n m r -> [r]

-- | To send <tt>BEGIN</tt> SQL statement.
begin :: ExecutedProcedure 0 0 ()

-- | To send <tt>COMMIT</tt> SQL statement.
commit :: ExecutedProcedure 0 0 ()

-- | To send <tt>ROLLBACK</tt> SQL statement.
rollback :: ExecutedProcedure 0 0 ()

-- | Transaction state of a server.
data TransactionState

-- | Not in a transaction block.
Idle :: TransactionState

-- | In a transaction block.
Block :: TransactionState

-- | Transaction failed.
Failed :: TransactionState

-- | This means that a field can be decoded as <tt>a</tt>.
class FromField a

-- | Decoder of a field.
fromField :: (FromField a, MonadFail m) => StringDecoder -> ColumnInfo -> Maybe ByteString -> m a

-- | This means that a record can be parsed as <tt>a</tt>.
class FromRecord a

-- | Decoder of a record.
fromRecord :: FromRecord a => StringDecoder -> [ColumnInfo] -> Parser a

-- | This means that <tt>a</tt> can be encoded to a field.
class ToField a

-- | Encoder of a field.
toField :: (ToField a, MonadFail m) => BackendParameters -> StringEncoder -> Maybe Oid -> FormatCode -> a -> m (Maybe ByteString)

-- | This means that <tt>a</tt> can be encoded to a record.
class ToRecord a

-- | Encoder of a field.
toRecord :: (ToRecord a, MonadFail m) => BackendParameters -> StringEncoder -> Maybe [Oid] -> [FormatCode] -> a -> m [Maybe ByteString]

-- | Data without encoding nor decoding of a field.
data Raw

-- | Not <tt>NULL</tt>.
pattern Value :: ByteString -> Raw

-- | <tt>NULL</tt>.
pattern Null :: Raw

-- | The number of columns.
type family Length a :: Nat

-- | Root exception.
--   
--   <pre>
--   <a>Exception</a>
--     ├ <a>ErrorResponse</a>
--     └ <a>ResponseParsingFailed</a>
--   </pre>
data Exception
Exception :: e -> Exception

-- | This means that the server responds an error.
data ErrorResponse
ErrorResponse :: ByteString -> ByteString -> ByteString -> Maybe TransactionState -> ErrorResponse
[severity] :: ErrorResponse -> ByteString
[code] :: ErrorResponse -> ByteString
[message] :: ErrorResponse -> ByteString
[transactionState] :: ErrorResponse -> Maybe TransactionState

-- | This means that the server responds an unknown message.
newtype ResponseParsingFailed
ResponseParsingFailed :: String -> ResponseParsingFailed
[causedBy] :: ResponseParsingFailed -> String

-- | OID.
--   
--   Constant values are listed in <tt>Database.PostgreSQL.Pure.Oid</tt>.
data Oid
instance Database.PostgreSQL.Pure.Internal.Query.Close (Database.PostgreSQL.Pure.PreparedStatement parameterLength resultLength)
instance GHC.Classes.Eq (Database.PostgreSQL.Pure.PreparedStatement parameterLength resultLength)
instance GHC.Show.Show (Database.PostgreSQL.Pure.PreparedStatement parameterLength resultLength)
instance Database.PostgreSQL.Pure.Internal.Query.Message (Database.PostgreSQL.Pure.PreparedStatementProcedure parameterLength resultLength)
instance GHC.Show.Show (Database.PostgreSQL.Pure.PreparedStatementProcedure parameterLength resultLength)
instance Database.PostgreSQL.Pure.Internal.Query.Close (Database.PostgreSQL.Pure.Portal parameterLength resultLength)
instance GHC.Classes.Eq (Database.PostgreSQL.Pure.Portal parameterLength resultLength)
instance GHC.Show.Show (Database.PostgreSQL.Pure.Portal parameterLength resultLength)
instance Database.PostgreSQL.Pure.Internal.Query.Message (Database.PostgreSQL.Pure.PortalProcedure parameterLength resultLength)
instance GHC.Show.Show (Database.PostgreSQL.Pure.PortalProcedure parameterLength resultLength)
instance GHC.Classes.Eq r => GHC.Classes.Eq (Database.PostgreSQL.Pure.Executed parameterLength resultLength r)
instance GHC.Show.Show r => GHC.Show.Show (Database.PostgreSQL.Pure.Executed parameterLength resultLength r)
instance Database.PostgreSQL.Pure.Internal.Query.Message (Database.PostgreSQL.Pure.ExecutedProcedure parameterLength resultLength r)
instance GHC.Show.Show (Database.PostgreSQL.Pure.ExecutedProcedure parameterLength resultLength r)
instance Database.PostgreSQL.Pure.Execute Database.PostgreSQL.Pure.Portal
instance Database.PostgreSQL.Pure.Execute Database.PostgreSQL.Pure.PortalProcedure
instance Database.PostgreSQL.Pure.Bind Database.PostgreSQL.Pure.PreparedStatement
instance Database.PostgreSQL.Pure.Bind Database.PostgreSQL.Pure.PreparedStatementProcedure
instance (oids GHC.Types.~ Data.Tuple.Homotuple.Homotuple n Database.PostgreSQL.Pure.Oid.Oid, GHC.Exts.Item oids GHC.Types.~ Database.PostgreSQL.Pure.Oid.Oid, GHC.Exts.IsList oids) => Database.PostgreSQL.Pure.HasParameterOids (Database.PostgreSQL.Pure.PreparedStatement n m) oids
instance (oids GHC.Types.~ Data.Tuple.Homotuple.Homotuple n Database.PostgreSQL.Pure.Oid.Oid, GHC.Exts.Item oids GHC.Types.~ Database.PostgreSQL.Pure.Oid.Oid, GHC.Exts.IsList oids) => Database.PostgreSQL.Pure.HasParameterOids (Database.PostgreSQL.Pure.PreparedStatementProcedure n m) (GHC.Maybe.Maybe oids)
instance Database.PostgreSQL.Pure.HasName (Database.PostgreSQL.Pure.PreparedStatement n m)
instance Database.PostgreSQL.Pure.HasName (Database.PostgreSQL.Pure.PreparedStatementProcedure n m)
instance Database.PostgreSQL.Pure.HasName (Database.PostgreSQL.Pure.Portal n m)
instance Database.PostgreSQL.Pure.HasName (Database.PostgreSQL.Pure.PortalProcedure n m)
instance GHC.Records.HasField "name" (Database.PostgreSQL.Pure.PortalProcedure n m) Database.PostgreSQL.Pure.Internal.Data.PortalName
instance GHC.Records.HasField "name" (Database.PostgreSQL.Pure.Portal n m) Database.PostgreSQL.Pure.Internal.Data.PortalName
instance GHC.Records.HasField "name" (Database.PostgreSQL.Pure.PreparedStatementProcedure n m) Database.PostgreSQL.Pure.Internal.Data.PreparedStatementName
instance (oids GHC.Types.~ Data.Tuple.Homotuple.Homotuple n Database.PostgreSQL.Pure.Oid.Oid, GHC.Exts.Item oids GHC.Types.~ Database.PostgreSQL.Pure.Oid.Oid, GHC.Exts.IsList oids) => GHC.Records.HasField "parameterOids" (Database.PostgreSQL.Pure.PreparedStatementProcedure n m) (GHC.Maybe.Maybe oids)
instance GHC.Records.HasField "name" (Database.PostgreSQL.Pure.PreparedStatement n m) Database.PostgreSQL.Pure.Internal.Data.PreparedStatementName
instance (oids GHC.Types.~ Data.Tuple.Homotuple.Homotuple n Database.PostgreSQL.Pure.Oid.Oid, GHC.Exts.Item oids GHC.Types.~ Database.PostgreSQL.Pure.Oid.Oid, GHC.Exts.IsList oids) => GHC.Records.HasField "parameterOids" (Database.PostgreSQL.Pure.PreparedStatement n m) oids


-- | This is a compatible interface with <tt>HDBC-postgresql</tt>'s
--   <tt>Database.HDBC.PostgreSQL</tt> except <a>Config</a>.
--   
--   Prepared statements are closed when some requests come once
--   <a>Statement</a>s are GCed, because HDBC doesn't have "close"
--   interface.
module Database.HDBC.PostgreSQL.Pure

-- | A configuration of a connection.
--   
--   Default configuration is <a>def</a>, which is following.
--   
--   <pre>
--   &gt;&gt;&gt; address def
--   AddressResolved 127.0.0.1:5432
--   
--   &gt;&gt;&gt; user def
--   "postgres"
--   
--   &gt;&gt;&gt; password def
--   ""
--   
--   &gt;&gt;&gt; database def
--   ""
--   
--   &gt;&gt;&gt; sendingBufferSize def
--   4096
--   
--   &gt;&gt;&gt; receptionBufferSize def
--   4096
--   </pre>
--   
--   <pre>
--   encodeString def = \code -&gt; case code of "UTF8" -&gt; <a>pure</a> . <a>fromString</a>; _ -&gt; <a>const</a> $ <a>fail</a> $ "unexpected character code: " &lt;&gt; <a>show</a> code
--   decodeString def = \code -&gt; case code of "UTF8" -&gt; <a>pure</a> . <a>toString</a>; _ -&gt; <a>const</a> $ <a>fail</a> $ "unexpected character code: " &lt;&gt; <a>show</a> code
--   </pre>
data Config
Config :: Address -> String -> String -> String -> Int -> Int -> (ShortByteString -> StringEncoder) -> (ShortByteString -> StringDecoder) -> Config
[$sel:address:Config] :: Config -> Address
[$sel:user:Config] :: Config -> String
[$sel:password:Config] :: Config -> String
[$sel:database:Config] :: Config -> String

-- | in byte
[$sel:sendingBufferSize:Config] :: Config -> Int

-- | in byte
[$sel:receptionBufferSize:Config] :: Config -> Int
[$sel:encodeString:Config] :: Config -> ShortByteString -> StringEncoder
[$sel:decodeString:Config] :: Config -> ShortByteString -> StringDecoder

-- | PostgreSQL connection.
data Connection

-- | IP address.
data Address

-- | Address which is DNS resolved.
AddressResolved :: SockAddr -> Address

-- | Address which is not DNS resolved.
AddressNotResolved :: HostName -> ServiceName -> Address

-- | Bracket function for a connection.
withConnection :: Config -> (Connection -> IO a) -> IO a

-- | To connect to the server.
connect :: Config -> IO Connection

-- | To send <tt>BEGIN</tt> SQL statement.
begin :: Connection -> IO ()
instance GHC.Classes.Eq Database.HDBC.PostgreSQL.Pure.RequestBuildingFailed
instance GHC.Read.Read Database.HDBC.PostgreSQL.Pure.RequestBuildingFailed
instance GHC.Show.Show Database.HDBC.PostgreSQL.Pure.RequestBuildingFailed
instance Database.HDBC.Types.IConnection Database.HDBC.PostgreSQL.Pure.Connection
instance GHC.Exception.Type.Exception Database.HDBC.PostgreSQL.Pure.RequestBuildingFailed
instance GHC.Show.Show Database.HDBC.PostgreSQL.Pure.Config
instance Data.Default.Class.Default Database.HDBC.PostgreSQL.Pure.Config
instance Database.PostgreSQL.Pure.Internal.Data.FromField Database.HDBC.SqlValue.SqlValue
instance Database.PostgreSQL.Pure.Internal.Data.ToField Database.HDBC.SqlValue.SqlValue
instance Database.PostgreSQL.Pure.Internal.Data.ToField GHC.Real.Rational
instance Data.Convertible.Base.Convertible Database.PostgreSQL.Pure.Oid.Oid Database.HDBC.ColTypes.SqlTypeId
instance Database.PostgreSQL.Pure.Internal.Data.FromField (Data.Time.LocalTime.Internal.TimeOfDay.TimeOfDay, Data.Time.LocalTime.Internal.TimeZone.TimeZone)
instance Database.PostgreSQL.Pure.Internal.Data.ToField (Data.Time.LocalTime.Internal.TimeOfDay.TimeOfDay, Data.Time.LocalTime.Internal.TimeZone.TimeZone)
